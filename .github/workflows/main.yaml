name: Build and Push Next.js and Proxy Images to AWS ECR

on:
  push:
    branches: [master]

permissions:
  id-token: write
  contents: write
  pull-requests: write

env:
  AWS_REGION: us-east-2
  ECR_REPOSITORY: puntored-api
  ECS_SERVICE: puntored-api-service
  ECS_CLUSTER: puntored
  ECS_TASK_DEFINITION: ./scripts/prod_task_definition.json
  CONTAINER_NAME: puntored-api

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git Identity
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Automatic Tagging
        id: increment-git-tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: bash ./scripts/git_update.sh -v patch

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3



      - name: Build and java image
        id: build-nextjs
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.increment-git-tag.outputs.git-tag }}
          outputs: type=registry

      - name: Export java img
        id: export-java-image
        run: echo "image=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.increment-git-tag.outputs.git-tag }}" >> $GITHUB_OUTPUT


      - name: Update ECS Task Definition (Api)
        id: update-task-java
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.export-nextjs-image.outputs.image }}

      - name: Deploy updated Task Definition to ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-nextjs.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true